#pragma once

#include "AttributesOwner.h"
#include "PresetDualParameterGroups.h"
#include <memory>
#include <unordered_map>
#include <string>

#include <tools/Uuid.h>

class EditBuffer;
class Bank;
class PresetSerializer;
class ParameterGroupsSerializer;
class SearchQuery;

class PresetParameterGroup;
class PresetParameter;
class PresetParameterGroupsSerializer;

class Preset : public PresetDualParameterGroups
{
 private:
  using super = PresetDualParameterGroups;

 public:
  Preset(UpdateDocumentContributor *parent);
  Preset(UpdateDocumentContributor *parent, const Preset &other, bool ignoreUuids);
  Preset(UpdateDocumentContributor *parent, const EditBuffer &editBuffer, bool copyUUID = false);
  ~Preset() override;

  // supported interfaces
  void writeDocument(Writer &writer, tUpdateID knownRevision) const override;
  void load(UNDO::Transaction *transaction, RefPtr<Gio::File> presetPath);
  bool save(RefPtr<Gio::File> bankPath);
  tUpdateID onChange(uint64_t flags = UpdateDocumentContributor::ChangeFlags::Generic) override;
  void setAttribute(UNDO::Transaction *transaction, const std::string &key, const ustring &value) override;
  void copyFrom(UNDO::Transaction *transaction, const AttributesOwner *other) override;
  void clear(UNDO::Transaction *transaction) override;
  void invalidate();

  SoundType getType() const;
  Glib::ustring getVoiceGroupName(VoiceGroup vg) const;
  void undoableSetVoiceGroupName(UNDO::Transaction* transaction, VoiceGroup vg, const Glib::ustring& name);

  // accessors
  const Uuid &getUuid() const;
  Glib::ustring getName() const;
  PresetParameter *findParameterByID(ParameterId id) const;
  PresetParameterGroup *findParameterGroup(const std::string &id, VoiceGroup vg) const;

  // transactions
  void copyFrom(UNDO::Transaction *transaction, const Preset *other, bool ignoreUuid);
  void copyFrom(UNDO::Transaction *transaction, EditBuffer *edit);
  void setUuid(UNDO::Transaction *transaction, const Uuid &uuid);
  void setName(UNDO::Transaction *transaction, const ustring &name);
  void setType(UNDO::Transaction *transaction, SoundType type);
  void guessName(UNDO::Transaction *transaction);
  void setAutoGeneratedAttributes(UNDO::Transaction *transaction);

  // algorithms
  Glib::ustring buildUndoTransactionTitle(const Glib::ustring &prefix) const;
  bool matchesQuery(const SearchQuery &query) const;

  void writeDiff(Writer &writer, const Preset *other) const;

  // signals
  sigc::connection onChanged(sigc::slot<void> cb);

 private:
  void lockAutoGeneratedAttributes();
  void unlockAutoGeneratedAttributes();

  EditBuffer *getEditBuffer() const;
  size_t getHash() const = delete;
  void updateBanksLastModifiedTimestamp(UNDO::Transaction *transaction);

  void writeGroups(Writer &w, const Preset *preset) const;
  Uuid m_uuid;
  Glib::ustring m_name;
  std::array<Glib::ustring, 2> m_voiceGroupLabels;

  SoundType m_type{ SoundType::Single };

  tUpdateID m_lastSavedUpdateID = 0;
  int m_autoGeneratedAttributesLockCount = 0;

  Signal<void> m_onChanged;
  friend class PresetSerializer;
  friend class PresetSettingsSerializer;
  friend class RecallEditBufferSerializer;
  friend class PresetParameterGroupsSerializer;
  friend class PresetAutoGeneratedAttributesLock;

  friend class RecallParameterGroups;
};
